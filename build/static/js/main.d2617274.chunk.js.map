{"version":3,"sources":["containers/Breaches/Breaches.css","components/BreachesList/BreachesList.css","components/Layout/Layout.css","components/Layout/Layout.js","components/LazyLoad/LazyLoad.js","components/BreachesList/BreachesList.js","containers/Breaches/Breaches.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","props","useState","isDark","setDarkMode","useEffect","localStorage","getItem","style","backgroundColor","className","classes","DarkMode","onClick","removeItem","setItem","Byline","Content","children","LazyLoad","lazyElem","useRef","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","setShouldRenderChild","disconnect","current","observe","shouldRenderChild","ref","BreachesList","Center","breaches","map","item","key","Name","PropertyCard","clickHandler","PropertyImage","PropertyImageTitle","PropertyDescription","Title","BreachDate","src","LogoPath","alt","width","height","Dashboard","React","lazy","BreachInfo","Breaches","setBreaches","singleBreach","setSingleBreach","showModal","setShowModal","fetchData","a","axios","get","data","items","handleClose","fallback","show","handleCloseModal","breach","closeModalHandler","breachName","find","JSON","stringify","breachClickHandler","App","defaults","headers","common","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2617274.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Breaches\":\"Breaches_Breaches_3pJPc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Center\":\"BreachesList_Center_E1pXO\",\"PropertyCard\":\"BreachesList_PropertyCard_2x73-\",\"PropertyImage\":\"BreachesList_PropertyImage_1UzCP\",\"PropertyDescription\":\"BreachesList_PropertyDescription_1MTMg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Byline\":\"Layout_Byline_1ocj8\",\"Content\":\"Layout_Content_LhJtv\",\"DarkMode\":\"Layout_DarkMode_1Lflk\"};","import React, { useState, useEffect } from \"react\";\n\nimport classes from \"./Layout.css\";\n\nconst Layout = (props) => {\n  const [isDark, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"darkMode\") !== null) {\n      setDarkMode(true);\n    }\n  }, []);\n\n  const darkMode = {\n    backgroundColor: \"black\",\n  };\n\n  const headerDark = {\n    backgroundColor: \"#111111\"\n  }\n\n  const darkModeHandler = () => {\n    if (isDark) {\n      setDarkMode(false);\n      localStorage.removeItem(\"darkMode\");\n    } else {\n      setDarkMode(true);\n      localStorage.setItem(\"darkMode\", true);\n    }\n  };\n\n  return (\n    <div style={isDark ? darkMode : null}>\n      <header style={isDark? headerDark: null}>\n        <button className={classes.DarkMode} onClick={darkModeHandler}>\n          <i className={!isDark ? \"fas fa-moon\" : \"fas fa-sun\"}></i>\n        </button>\n        <h1>Breaches Info</h1>\n        <span className={classes.Byline}>Last Known Breaches</span>\n        <span className={classes.Byline}>Click on site for more info</span>\n      </header>\n      <main className={classes.Content}>{props.children}</main>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { debounce } from '../../utils/utils';\n\nconst LazyLoad = (props) => {\n  const lazyElem = useRef();\n  useEffect(() => {\n    let observer = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          const { isIntersecting } = entry;\n          if (isIntersecting) {\n            setShouldRenderChild(true);\n            observer = observer.disconnect();\n          }\n        });\n      },\n    );\n    if (lazyElem.current) {\n      observer.observe(lazyElem.current)\n    }\n  }, []);\n\n  const [shouldRenderChild, setShouldRenderChild] = useState(false)\n\n  return (\n    <div ref={lazyElem}>\n      {\n        shouldRenderChild ? props.children : null\n      }\n    </div>\n  )\n};\n\nexport default LazyLoad;\n","import React from \"react\";\nimport classes from \"./BreachesList.css\";\nimport LazyLoad from '../LazyLoad/LazyLoad';\n\nconst BreachesList = (props) => {\n  return (\n    <div className={classes.Center}>\n      {(props.breaches || []).map((item) => {\n        return (\n          <div key={item.Name} className={classes.PropertyCard} onClick={() => props.clickHandler(item.Name)}>\n            <span>\n              <div className={classes.PropertyImage}>\n                <div className={classes.PropertyImageTitle}></div>\n              </div>\n            </span>\n            <div className={classes.PropertyDescription}>\n              <h5>Title: {item.Title} </h5>\n              <p>BreachData: {item.BreachDate}</p>\n              <LazyLoad>\n                <img\n                  src={item.LogoPath}\n                  alt=\"logo\"\n                  style={{\n                    width: \"48px\",\n                    height: \"48px\",\n                    backgroundColor: \"black\",\n                  }}\n                />\n              </LazyLoad>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default BreachesList;\n","import React, { useState, useEffect, Suspense } from \"react\";\nimport axios from \"axios\";\nimport BreachesList from \"../../components/BreachesList/BreachesList\";\n// import BreachInfo from \"../../components/BreacheInfo/BreachInfo\";\nimport classes from \"./Breaches.css\";\n//import Dashboard from \"../../components/Dashboard/Dashboard\";\nconst Dashboard = React.lazy(() => import(/* webpackChunkName: \"Dashboard\" */ '../../components/Dashboard/Dashboard'))\nconst BreachInfo = React.lazy(() => import(/* webpackChunkName: \"BreachInfo\" */ '../../components/BreacheInfo/BreachInfo'))\n\nconst Breaches = () => {\n  const apiURL = \"https://guard.io/v2/hiring/fe/breaches?offset=0\";\n  const [breaches, setBreaches] = useState([]);\n  const [singleBreach, setSingleBreach] = useState({});\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"breach\") !== null) {\n      setShowModal(true);\n    }\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const breaches = await axios.get(apiURL);\n      if (breaches) {\n        setBreaches(breaches.data.items);\n      }\n    } catch (error) { }\n  };\n\n  const breachClickHandler = (breachName) => {\n    const breach = breaches.find((item) => item.Name === breachName);\n    setSingleBreach(breach);\n    localStorage.setItem(\"breach\", JSON.stringify(breach));\n    setShowModal(true);\n  };\n\n  const handleClose = () => {\n    setShowModal(false);\n    localStorage.removeItem('breach');\n  };\n\n  return (\n    <div className={classes.Breaches}>\n      {\n        showModal && (\n          <Suspense fallback={<div>Loading...</div>}>\n            <Dashboard show={showModal} handleCloseModal={handleClose}>\n              <BreachInfo breach={singleBreach} closeModalHandler={handleClose} />\n            </Dashboard>\n          </Suspense>\n        )\n      }\n      <BreachesList\n        breaches={breaches}\n        clickHandler={(breachName) => breachClickHandler(breachName)}\n      />\n    </div>\n  );\n};\n\nexport default Breaches;\n","import React from \"react\";\nimport Layout from \"./components/Layout/Layout\";\nimport Breanches from \"./containers/Breaches/Breaches\";\nimport axios from \"axios\";\n\nfunction App() {\n  axios.defaults.headers.common[\"X-Best-Pokemon\"] = \"Mew\";\n  return (\n    <div>\n      <Layout>\n        <Breanches />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}